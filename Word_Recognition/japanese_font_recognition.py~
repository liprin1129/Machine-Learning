import os
import sys

global_path = os.path.abspath("/mnt/SharedData/Development/Personal_Dev/Machine-Learning/One_Layer/")

if global_path not in sys.path:
    sys.path.append(global_path)

from pickle_helper import PickleHelper

import numpy as np
#import cv2
import matplotlib.pyplot as plt

import tensorflow as tf
from tensorflow.contrib.learn.python.learn.datasets.mnist import read_data_sets
from tensorflow.contrib.layers import flatten
from tensorflow.python.framework import ops

from font_CNN import font_recognition
fonts_pkl = os.listdir("/mnt/SharedData/Development/Personal_Dev/Machine-Learning/Data/Font data/")

'''
# -------------------------
# CHECK DATA CORRESPONDENCE
# -------------------------
font_data1 = PickleHelper.load_pickle(
    path="/mnt/SharedData/Development/Personal_Dev/Machine-Learning/Data/Font data/",
    name = fonts_pkl[0])
font_data2 = PickleHelper.load_pickle(
    path="/mnt/SharedData/Development/Personal_Dev/Machine-Learning/Data/Font data/",
    name = fonts_pkl[5])

train_xdata1 = font_data1[0]
train_ydata1 = [i for i in range(0, len(train_xdata1))]

train_xdata2 = font_data2[0]
train_ydata2 = [i for i in range(0, len(train_xdata2))]

print(np.shape(train_xdata1[0]))
#np.reshape(train_xdata1[0], (28, 28))

import time

for i in range(10):

    index = np.random.randint(len(train_xdata1))
    font_img1 = np.reshape(train_xdata1[index], (28, 28))
    font_img2 = np.reshape(train_xdata2[index], (28, 28))

    fig, ax = plt.subplots(1, 2, figsize=(5, 5))
    ax[0].imshow(font_img1, cmap='gray')
    ax[1].imshow(font_img2, cmap='gray')
    plt.show()
# -------------------------
'''

def font_load(idx):
    font_data = PickleHelper.load_pickle(
        path="/mnt/SharedData/Development/Personal_Dev/Machine-Learning/Data/Font data/",
        name = fonts_pkl[idx])

    train_x_data = normalize_cols(font_data[0])
    train_xdata = np.reshape(train_x_data, (-1, 28, 28))
    train_ydata = [i for i in range(0, len(train_xdata))]

    return train_xdata, train_ydata

### NORMALIZATION BY COLUMN
def normalize_cols(m):
    col_max = np.max(m, axis=0)
    col_min = np.min(m, axis=0)
    return (m-col_min) / (col_max - col_min)

train_xdata, train_ydata = font_load(0)

eval_index = np.random.choice(len(train_xdata), size=batch_size)
print('TRAIN SHAPE: ', np.shape(train_xdata), train_xdata[eval_index])
print('LABEL SHAPE: ', np.shape(train_ydata), train_ydata[eval_index])
'''
font_recognition(train_xdata, train_ydata, None, None, learning_rate = 0.1,
                 conv1_filter=2, conv1_depth = 10, max_pool_size1 = 2,
                 conv2_filter=4, conv2_depth = 60, max_pool_size2 = 4,
                 fully_size1= 1800, target_size = 2136)
'''
