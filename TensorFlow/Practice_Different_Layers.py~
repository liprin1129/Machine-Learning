import tensorflow as tf
import matplotlib.pyplot as plt
import csv
import os
import random
import numpy as np
from tensorflow.python.framework import ops

'''
1. Convolutional Layer
2. Activation Layer
3. Max-Pool Layer
4. Fully Connected Layer
'''

#---------------------------------------------------|
#-------------------1D-data-------------------------|
#---------------------------------------------------|
ops.reset_default_graph()
sess = tf.Session()

# PARAMETER FOR THE RUN
data_size = 25
conv_size = 5
maxpool_size = 5
stride_size = 1

# FOR REPORUDUCIBILITY
seed = 13
np.random.seed(seed)
tf.set_random_seed(seed)

# GENERATE 1D DATA
data_1d = np.random.normal(size=data_size)

# PLACEHOLDER
x_input_1d = tf.placeholder(dtype=tf.float32, shape=[data_size])

#--------Convolution--------
## https://www.codeday.top/2017/10/10/48180.html

def conv_layer_1d(input_1d, my_filter, stride_1d):
    # TensorFlow's 'conv2d()' function only works with 4D arrays:
    # [batch#, width, height, channels], we have 1 batch, and
    # width = 1, but height = the length of the input, and 1 channel.
    # So next we create the 4D array by inserting dimension 1's.

    # [batch, length, dimension]
    input_2d = tf.expand_dims(input_1d, 0)
    input_3d = tf.expand_dims(input_2d, -1)
    #input_4d = tf.expand_dims(input_3d, 3)

    print(np.shape(input_3d))

    return tf.nn.conv1d(input_3d, my_filter, stride=stride_1d, padding='VALID')

'''
    # Perform convolution with stride = 1, if we wanted to increase the stride,
    # to say '2', then strides=[1,1,2,1]
    convolution_output = tf.nn.conv2d(input_4d, filter=my_filter, strides=[1,1,stride,1], padding='VALID')
    # Get rid of extra dimensions
    conv_output_1d = tf.squeeze(convolution_output)
    return(conv_output_1d)
'''
# CREATE FILTER FOR CONVOLUTION
## [filter width, input dimension, output dimension]
my_filter = tf.Variable(tf.truncated_normal([3, 1, 1]))
#tf.Variable(tf.random_normal(shape=[1,conv_size,1,1]))

my_convolution_output = conv_layer_1d(x_input_1d, my_filter, stride_1d = 1)

feed_dict = {x_input_1d: data_1d}

print('Input = array of length %d' % (x_input_1d.shape.as_list()[0]))
print('Convolution w/ filter, length = %d, stride size = %d, results in an array of length %d:' % 
      (conv_size,stride_size,my_convolution_output.shape.as_list()[0]))
print(sess.run(my_convolution_output, feed_dict=feed_dict))
