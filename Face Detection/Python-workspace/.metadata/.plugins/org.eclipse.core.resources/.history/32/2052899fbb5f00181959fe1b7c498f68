'''
Created on May 25, 2018

@author: user170
'''

import cv2
import numpy as np
from pickle_helper import PickleHelper
from image_helper import ImgFunctions
import matplotlib.pyplot as plt

class MyClass(object):


    def __init__(self, params):

    def cut_down_to_windows(self, img, kernel_size=[360, 360], strides=[30, 30]):
        '''
        Convert img size to HD size (1920x1080), and return a list of small patches of the enlarged image.
        '''
    
        return_list = []
        
        hd_img = ImgFunctions.resize_img(img, (1920, 1080))
        hd_img = ImgFunctions.bgr2rgb(hd_img)
        tx = 0
        ty = 0
    
    
        iter_x = int((1920-kernel_size[0])/strides[0])+1
        iter_y = int((1080-kernel_size[1])/strides[1])+1
        
        for i in range(iter_x):
            for j in range(iter_y):
                #print("{0}, {1}: {2}, {3}".format(ty, ty+kernel_size[1], tx, tx+kernel_size[0]))
                    
                #img2 = cv2.rectangle(hd_img,(tx,ty),(tx+kernel_size[0],ty+kernel_size[1]),(0,255,0),5)
                #plt.imshow(ImgFunctions.bgr2rgb(img2))
                #plt.show()
                
                patch_img = ImgFunctions.resize_img(hd_img[ty:ty+kernel_size[1], tx:tx+kernel_size[0]])
                patch_img = ImgFunctions.scailing(patch_img)
                return_list.append(patch_img)
    
                ty += strides[0]
                
            tx += strides[1]
            ty = 0
        
    
        print("Return shape:", np.shape(return_list))
        #plt.imshow(ImgFunctions.bgr2rgb(return_list[-1]))
        #plt.show()
        return np.array(return_list)
        